Student life

public class HttpUtil {

    /**
     * 默认ua
     */
    private static final String USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36";

    public static void main(String[] args) {
        String urlGet = "http://www.kdlins.com.cn/KdlinsWeb/verifyPolicy!download.action?policyNo=eZJK7O3%2Fw%2FeURRavrgMyfg%3D%3D&newFlag=true";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1000; i++) {
            HttpResponseModel responseModel = httpTLSGet(urlGet, "", "", 5000, 5000, 5000);
            if (responseModel.getStatusCode() != HttpStatus.OK.value()) {
                sb.append(i).append("-");
            }
            // url存在 但未生成pdf文档 即 电子保单大小限制 进行报警，通过url下载电子保单异常（保司接口下载文件错误）
            if (new ByteArrayInputStream(responseModel.getBodyBytes()).available() < 1024) {
                sb.append(i).append("_");
            }
        }
        System.out.println(sb);
    }

    public static HttpResponseModel httpPost(String url, String orgNO, String timeStamp, String integritySign, String encryParam) {
        CloseableHttpClient httpClient = HttpClientManager.getInstance().getClient();
        HttpPost method = new HttpPost(url);
        method.addHeader("orgNo", orgNO);
        method.addHeader("timeStamp", timeStamp);
        method.addHeader("integritySign", integritySign);
        StringEntity entity = new StringEntity(encryParam, "utf-8");
        entity.setContentEncoding("UTF-8");
        method.setEntity(entity);
        return getResponseModel(httpClient, method, HttpClientManager.getInstance().getDefaultContext());
    }

    public static HttpResponseModel httpTLSGet(String url, String queryString, String ua, int connectionRequestTimeout, int connectTimeout, int socketTimeout) {
        if (StringUtils.isBlank(ua)) {
            ua = USER_AGENT;
        }
        CloseableHttpClient httpClient = HttpClientManager.getInstance().getTLSClient();
        HttpGet method = new HttpGet(appendQueryString(url, queryString));
        method.addHeader("User-Agent", ua);
        return getResponseModel(httpClient, method, HttpClientManager.getInstance().getContext(connectionRequestTimeout, connectTimeout, socketTimeout));
    }

    private static String appendQueryString(String url, String queryString) {
        String result = url;
        if (StringUtils.isNotBlank(queryString)) {
            if (result.contains("?")) {
                if (result.endsWith("?")) {
                    result += queryString;
                } else {
                    result = StringUtils.stripEnd(url, "&");
                    result += "&" + queryString;
                }
            } else {
                result += "?" + queryString;
            }
        }
        return result;
    }


    private static HttpResponseModel getResponseModel(CloseableHttpClient httpClient, HttpRequestBase requestBase, HttpClientContext context) {
        InputStream stream = null;
        CloseableHttpResponse response = null;

        HttpResponseModel var6;
        try {
            response = httpClient.execute(requestBase, context);
            StatusLine statusLine = response.getStatusLine();
            int statusCode = statusLine.getStatusCode();
            String reasonPhrase = StringUtils.trimToEmpty(statusLine.getReasonPhrase());
            HttpEntity entity = response.getEntity();
            if (entity == null) {
                throw new ClientProtocolException("Response contains no content");
            }

            Header[] headers = response.getAllHeaders();
            Map<String, String> headerMap = new HashMap();
            Header[] var11 = headers;
            int var12 = headers.length;

            for (int var13 = 0; var13 < var12; ++var13) {
                Header header = var11[var13];
                headerMap.put(header.getName(), header.getValue());
            }

            String contentType = StringUtils.trimToEmpty((String) headerMap.get("Content-Type"));
            String charset = StringUtils.trimToEmpty((String) headerMap.get("Content-Encoding"));
            String contentLengthString = StringUtils.trimToEmpty((String) headerMap.get("Content-Length"));
            if (!contentLengthString.isEmpty() && contentLengthString.equals("0")) {
                HttpResponseModel var40 = new HttpResponseModel(statusCode, reasonPhrase, contentType, charset, headerMap, new byte[0]);
                return var40;
            }

            stream = entity.getContent();
            byte[] buffer = new byte[8192];
            ByteArrayOutputStream baos = new ByteArrayOutputStream(102400);

            int readSize;
            while ((readSize = stream.read(buffer)) != -1) {
                baos.write(buffer, 0, readSize);
            }

            HttpResponseModel var17 = new HttpResponseModel(statusCode, reasonPhrase, contentType, charset, headerMap, baos.toByteArray());
            return var17;
        } catch (IOException var33) {
            var6 = new HttpResponseModel(var33.getLocalizedMessage(), ExceptionUtils.getStackTrace(var33));
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (IOException var32) {
                }
            }

            if (response != null) {
                try {
                    response.close();
                } catch (IOException var31) {
                }
            }

        }

        return var6;
    }
}
